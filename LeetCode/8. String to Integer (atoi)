# Techincal used: 

# Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

# The algorithm for myAtoi(string s) is as follows:

# Read in and ignore any leading whitespace.
# Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. 
# This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
# Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
# Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
# If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. 
# Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
# Return the integer as the final result.

class Solution:
    def myAtoi(self, s: str) -> int:
        if len(s) == 0:
            return 0
        w,si,i,m,r,d,b,p = 0,1,0,2147483647,0,10,0,0
        for j in s:
            if j.isspace():
                if w == 1:
                    break
            elif j.isalpha():
                if w == 1 or b!= 1:
                    break
            elif j =="+":
                if p == 1:
                    return i*si
                p,w = 1,1
            elif j =="-":
                if p == 1:
                    return i*si
                si*=-1
                p,w = 1,1
            elif j == ".":
                return i
            elif j.isdigit():
                i = i*10+int(j)
                b = 1
                w = 1
                p = 1
                if i > m: 
                    i = m
                    if si == -1:
                        r = 1
                    return i*si-r
        return i*si
            
